extends layout

block content
  h2 Models
  :markdown
    [Models](./api.html#model-js) 是从 `Schema` 编译来的构造函数。 它们的实例就是可以从数据库保存和读取的 [documents](./documents.html)。
    从数据库创建和读取 document 的所有操作都是通过 model 进行的。

  h3 编译你的第一个 model
  :markdown
    ```javascript
    var schema = new mongoose.Schema({ name: 'string', size: 'string' });
    var Tank = mongoose.model('Tank', schema);
    ```
  :markdown
    第一个参数是 model 对应 collection 名字的_单数_形式。 ** Mongoose 自动查找名称是 model 名字_复数_形式的 collection **。
    对于上例，Tank 这个 model 就对应数据库中 **tanks** 这个 collection。`.model()` 这个函数是对 `schema` 做了次复制。
    你要确保在调用 `.model()` 之前把所有需要的东西都加进 `schema` 了！

  h3 构造 documents
  :markdown
    [Documents](./documents.html) 是 model 的实例。 创建它们并保存到数据库非常简单：
    ```javascript
    var Tank = mongoose.model('Tank', yourSchema);

    var small = new Tank({ size: 'small' });
    small.save(function (err) {
      if (err) return handleError(err);
      // saved!
    })

    // or

    Tank.create({ size: 'small' }, function (err, small) {
      if (err) return handleError(err);
      // saved!
    })
    ```
  :markdown
    要注意到， tanks 不会被创建或删除，直到 model 使用的数据库连接 (connection) 被打开。每个 model 都有绑定的连接。
    
    When you use
    `mongoose.model()`, your model will use the default mongoose connection.
    ```javascript
    mongoose.connect('localhost', 'gettingstarted');
    ```
  :markdown
    If you create a custom connection, use that connection's `model()` function
    instead.
    ```javascript
    var connection = mongoose.createConnection('mongodb://localhost:27017/test');
    var Tank = connection.model('Tank', yourSchema);
    ```
  h3 Querying
  :markdown
    Finding documents is easy with Mongoose, which supports the [rich](http://www.mongodb.org/display/DOCS/Advanced+Queries) query syntax of MongoDB. Documents can be retreived using each `models` [find](./api.html#model_Model.find), [findById](./api.html#model_Model.findById), [findOne](./api.html#model_Model.findOne), or [where](./api.html#model_Model.where) static methods.

    ```javascript
    Tank.find({ size: 'small' }).where('createdDate').gt(oneYearAgo).exec(callback);
    ```
  :markdown
    See the chapter on [querying](./queries.html) for more details on how to use the [Query](./api.html#query-js) api.
  h3 Removing
  :markdown
    Models have a static `remove` method available for removing all documents matching `conditions`.
    ```javascript
    Tank.remove({ size: 'large' }, function (err) {
      if (err) return handleError(err);
      // removed!
    });
    ```
  h3 Updating
  :markdown
    Each `model` has its own `update` method for modifying documents in the database without returning them to your application. See the [API](./api.html#model_Model.update) docs for more detail.

    _If you want to update a single document in the db and return it to your application, use [findOneAndUpdate](./api.html#model_Model.findOneAndUpdate) instead._
  h3 Yet more
  :markdown
    The [API docs](./api.html#model_Model) cover many additional methods available like [count](./api.html#model_Model.count), [mapReduce](./api.html#model_Model.mapReduce), [aggregate](./api.html#model_Model.aggregate), and [more](./api.html#model_Model.findOneAndRemove).

  h3#next Next Up
  :markdown
    Now that we've covered `Models`, let's take a look at [Documents](/docs/documents.html).
