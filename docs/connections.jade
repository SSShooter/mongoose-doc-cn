extends layout

block content
  :markdown
    <h2><a href="#connections">Connections</a></h2>

    你可以使用 `mongoose.connect()` 方法连接 MongoDB 。

    ```javascript
    mongoose.connect('mongodb://localhost/myapp');
    ```

    这是连接到本地 `myapp` 数据库默认接口(27017)的最小配置。
    本地连接失败可以尝试连接 127.0.0.1 。
    local hostname 被修改有时候会引起问题。

    你也可以在 `uri` 中指定多个参数：

    ```javascript
    mongoose.connect('mongodb://username:password@host:port/database?options...');
    ```

    详情请看 [mongodb connection string spec](http://docs.mongodb.org/manual/reference/connection-string/) for more detail.

    <h3 id="buffering"><a href="#buffering">操作缓存</a></h3>

    你不必等待连接建立成功就可以使用你的 Mongoose models 。

    ```javascript
    mongoose.connect('mongodb://localhost/myapp');
    var MyModel = mongoose.model('Test', new Schema({ name: String }));
    // 可行
    MyModel.findOne(function(error, result) { /* ... */ });
    ```

    Mongoose 会缓存你的 model 操作。这个操作很方便，但也回引起一些疑惑,
    因为如果你没连上 ，Mongoose *不会* 抛错。

    ```javascript
    var MyModel = mongoose.model('Test', new Schema({ name: String }));
    // 连接成功前操作会被挂起
    MyModel.findOne(function(error, result) { /* ... */ });

    setTimeout(function() {
      mongoose.connect('mongodb://localhost/myapp');
    }, 60000);
    ```

    要禁用缓存，请修改 [`bufferCommands`](./guide.html#bufferCommands) 配置。
    如果你打开了 `bufferCommands` 连接被挂起，尝试关闭 `bufferCommands` 
    检查你是否正确打开连接。
    你也可以全局禁用 `bufferCommands` ：

    ```javascript
    mongoose.set('bufferCommands', false);
    ```

    <h3 id="options"><a href="#options">选项</a></h3>

    `connect` 方法也接受 `options` 参数，这些参数会传入底层 MongoDB 驱动。

    ```javascript
    mongoose.connect(uri, options);
    ```

    完整参数列表请参考
    [MongoDB Node.js 驱动文档 `connect()`](http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html#connect)。
    Mongoose 会不做修改直接把选项传到驱动，以下有一点例外

    * `bufferCommands`    - 这是 mongoose 特有的选项 (不传到 MongoDB) ，禁用 [mongoose 缓存机制](http://mongoosejs.com/docs/faq.html#callback_never_executes)
    * `user`/`pass`       - 用于认证的用户名和密码。mongoose 特有，等价于 MongoDB 驱动的 `auth.user` 和 `auth.password` 选项
    * `autoIndex`         - 默认情况下，mongoose 在连接时会自动建立 schema 的索引。这有利于开发，但是在大型生产环境下不是十分理想，因为索引建立会导致性能下降。如果 `autoIndex` 设为 false，mongoose 将不会自动建立索引
    * `dbName`            - 指定要连接的数据库名称（覆盖连接字符串）。 如果你使用 `mongodb+srv` 语法连接 [MongoDB Atlas](https://www.mongodb.com/cloud/atlas), 你 [需要使用 `dbName` 指定数据库](https://stackoverflow.com/questions/48917591/fail-to-connect-mongoose-to-atlas/48917626#48917626)

    以下是一些重要选项

    * `autoReconnect`     - 底层 MongoDB 驱动在连接丢失后将自动重连。除非你是可以自己管理连接池的高手，否则**不要**把这个选项设为 `false`
    * `reconnectTries`    - If you're connected to a single server or mongos proxy (as opposed to a replica set), the MongoDB driver will try to reconnect every `reconnectInterval` milliseconds for `reconnectTries` times, and give up afterward. When the driver gives up, the mongoose connection emits a `reconnectFailed` event. This option does nothing for replica set connections.
    * `reconnectInterval` - 见 `reconnectTries`
    * `promiseLibrary`    - 设定底层 [promise 库](http://mongodb.github.io/node-mongodb-native/2.1/api/MongoClient.html)
    * `poolSize`          - MongoDB 保持的最大 socket 连接数。 `poolSize` 的默认值是 5。注意，MongoDB 3.4 之前， MongoDB 只允许每个 socket 同时进行一个操作，所以如果你有几个缓慢请求卡着后面快的请求，可以尝试增加连接数。
    * `bufferMaxEntries`  - MongoDB 驱动同样有自己的离线时缓存机制。如果你希望链接错误时终止数据库操作，请将此选项设为 0 以及把 `bufferCommands` 设为 `false` 。

    举例：

    ```javascript
    const options = {
      useMongoClient: true,
      autoIndex: false, // Don't build indexes
      reconnectTries: Number.MAX_VALUE, // Never stop trying to reconnect
      reconnectInterval: 500, // Reconnect every 500ms
      poolSize: 10, // Maintain up to 10 socket connections
      // If not connected, return errors immediately rather than waiting for reconnect
      bufferMaxEntries: 0
    };
    mongoose.connect(uri, options);
    ```

    <h3 id="callback"><a href="#callback">回调</a></h3>

    `connect()` 函数接受回调函数，或返回一个 [promise](./promises.html)。

    ```javascript
    mongoose.connect(uri, options, function(error) {
      // Check error in initial connection. There is no 2nd param to the callback.
    });

    // Or using promises
    mongoose.connect(uri, options).then(
      () => { /** ready to use. The `mongoose.connect()` promise resolves to undefined. */ },
      err => { /** handle initial connection error */ }
    );
    ```

    <h3 id="connection-string-options"><a href="#connection-string-options">连接字符串（ Connection String ）选项</a></h3>

    你也可以在连接字符串填写驱动选项，但是这只适用于 MongoDB 驱动使用的选项，
    所以类似 `bufferCommands` 的 Mongoose 专用选项**不能**在连接字符串使用。

    ```javascript
    mongoose.connect('mongodb://localhost:27017/test?connectTimeoutMS=1000&bufferCommands=false');
    // The above is equivalent to:
    mongoose.connect('mongodb://localhost:27017/test', {
      connectTimeoutMS: 1000
      // Note that mongoose will **not** pull `bufferCommands` from the query string
    });
    ```

    把选项放在连接字符串的劣势是不便于阅读，优势是你只需要写一条连接而不需要把所有设定分开写。
    最佳实践是把区分生产环境和开发环境的选项如 `socketTimeoutMS` 、 `connectTimeoutMS` 放在 uri ，
    把通用的常量如 `connectTimeoutMS` 、 `poolSize` 放在选项对象里。

    MongoDB 的文档[可以找到](https://docs.mongodb.com/manual/reference/connection-string/)关于连接字符串的所有选项。

    <h3 id="keepAlive"><a href="#keepAlive">A note about keepAlive</a></h3>

    For long running applications, it is often prudent to enable `keepAlive`
    with a number of milliseconds. Without it, after some period of time
    you may start to see `"connection closed"` errors for what seems like
    no reason. If so, after
    [reading this](http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html),
    you may decide to enable `keepAlive`:

    ```javascript
    mongoose.connect(uri, { keepAlive: 120 });
    ```

    <h3 id="replicaset_connections"><a href="#replicaset_connections">Replica Set Connections</a></h3>

    To connect to a replica set you pass a comma delimited list of hosts to
    connect to rather than a single host.

    ```javascript
    mongoose.connect('mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]' [, options]);
    ```

    To connect to a single node replica set, specify the `replicaSet` option.

    ```javascript
    mongoose.connect('mongodb://host1:port1/?replicaSet=rsName');
    ```

    <h3 id="mongos_connections"><a href="#mongos_connections">Multi-mongos support</a></h3>

    You can also connect to multiple [mongos](https://docs.mongodb.com/manual/reference/program/mongos/) instances
    for high availability in a sharded cluster. You do
    [not need to pass any special options to connect to multiple mongos](http://mongodb.github.io/node-mongodb-native/3.0/tutorials/connect/#connect-to-sharded-cluster) in mongoose 5.x.

    ```javascript
    // Connect to 2 mongos servers
    mongoose.connect('mongodb://mongosA:27501,mongosB:27501', cb);
    ```

    <h3 id="multiple_connections"><a href="#multiple_connections">Multiple connections</a></h3>

    So far we've seen how to connect to MongoDB using Mongoose's default
    connection. At times we may need multiple connections open to Mongo, each
    with different read/write settings, or maybe just to different databases for
    example. In these cases we can utilize `mongoose.createConnection()` which
    accepts all the arguments already discussed and returns a fresh connection
    for you.

    ```javascript
    const conn = mongoose.createConnection('mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]', options);
    ```

    This [connection](./api.html#connection_Connection) object is then used to
    create and retrieve [models](./api.html#model_Model). Models are
    **always** scoped to a single connection.

    Mongoose creates a _default connection_ when you call `mongoose.connect()`.
    You can access the default connection using `mongoose.connection`.

    <h3 id="connection_pools"><a href="connection_pools">Connection pools</a></h3>

    Each `connection`, whether created with `mongoose.connect` or
    `mongoose.createConnection` are all backed by an internal configurable
    connection pool defaulting to a maximum size of 5. Adjust the pool size
    using your connection options:

    ```javascript
    // With object options
    mongoose.createConnection(uri, { poolSize: 4 });

    const uri = 'mongodb://localhost/test?poolSize=4';
    mongoose.createConnection(uri);
    ```

    <h3 id="v5-changes"><a href="#v5-changes">v5.x 的变化</a></h3>

    
    You may see the following deprecation warning if upgrading from 4.x to 5.x
    and you didn't use the `useMongoClient` option in 4.x:

    ```
    the server/replset/mongos options are deprecated, all their options are supported at the top level of the options object
    ```

    In older version of the MongoDB driver you had to specify distinct options
    for server connections, replica set connections, and mongos connections:

    ```javascript
    mongoose.connect(myUri, {
      server: {
        socketOptions: {
          socketTimeoutMS: 0,
          keepAlive: true
        },
        reconnectTries: 30
      },
      replset: {
        socketOptions: {
          socketTimeoutMS: 0,
          keepAlive: true
        },
        reconnectTries: 30
      },
      mongos: {
        socketOptions: {
          socketTimeoutMS: 0,
          keepAlive: true
        },
        reconnectTries: 30
      }
    });
    ```

    In mongoose v5.x you can instead declare these options at the top level,
    without all that extra nesting.
    [Here's the list of all supported options](http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html).

    ```javascript
    // Equivalent to the above code
    mongoose.connect(myUri, {
      socketTimeoutMS: 0,
      keepAlive: true,
      reconnectTries: 30
    });
    ```

    <h3 id="next">下一步</h3>

    现在我们介绍了 mongoose 的连接方式，接着看看
    [models](/docs/models.html)。
