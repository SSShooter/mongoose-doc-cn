extends layout

block append style
  style.
    hr {
      display: block;
      margin-top: 40px;
      margin-bottom: 40px;
      border: 0px;
      height: 1px;
      background-color: #232323;
      width: 100%;
    }

block content
  :markdown
    ## 快速上手

    _请先安装 [MongoDB](http://www.mongodb.org/downloads) 和 [Node.js](http://nodejs.org/)。 _

    下一步，`npm`安装Mongoose:

    ```
    $ npm install mongoose
    ```

    假设我们都很喜欢喵星人，想在MongoDB里记录每只我们见过的喵星人。
    首先我们要在项目中引入 mongoose ，然后连接我们本地的 `test` 数据库。

    ```javascript
    // getting-started.js
    var mongoose = require('mongoose');
    mongoose.connect('mongodb://localhost/test', {useNewUrlParser: true});
    ```

    `connect()` 返回一个状态待定（pending）的连接，
    接着我们加上成功提醒和失败警告。

    ```javascript
    var db = mongoose.connection;
    db.on('error', console.error.bind(console, 'connection error:'));
    db.once('open', function() {
      // we're connected!
    });
    ```

    连接成功时，回调函数会被调用。简洁起见，
    我们假设下面所有函数都运行在这个回调函数里。

    Mongoose 里，一切都始于[Schema](/docs/guide.html)。
    现在我们来看一个例子：

    ```javascript
    var kittySchema = new mongoose.Schema({
      name: String
    });
    ```

    很好，我们得到了一个带有 `String` 类型 `name` 属性的 schema 。
    接着我们需要把这个 schema 编译成一个 [Model](/docs/models.html)：

    ```javascript
    var Kitten = mongoose.model('Kitten', kittySchema);
    ```

    model 是我们构造 document 的 Class。
    在例子中，每个 document 都是一只喵，它的属性和行为都会被声明在 schema。
    现在我们来“创造”一只猫：

    ```javascript
    var felyne = new Kitten({ name: 'Felyne' });
    console.log(felyne.name); // 'Felyne'
    ```

    不会喵怎么算喵星人，现在给喵星人 document 加个 "speak" 方法：

    ```javascript
    // 译者注：注意了， method 是给 document 用的
    // NOTE: methods must be added to the schema before compiling it with mongoose.model()
    kittySchema.methods.speak = function () {
      var greeting = this.name
        ? "Meow name is " + this.name
        : "I don't have a name";
      console.log(greeting);
    }

    var Kitten = mongoose.model('Kitten', kittySchema);
    ```

    加在 schema `methods` 属性的函数会编译到 `Model` 的 prototype，
    也会暴露到每个 document 实例：

    ```javascript
    var fluffy = new Kitten({ name: 'fluffy' });
    fluffy.speak(); // "Meow name is fluffy"
    ```

    赞！是一只会说话的瞄星人！emmmmm虽然我们还没吧它存到数据库里。
    每个 document 会在调用他的 [save](/docs/api.html#model_Model-save) 方法后保存到数据库。
    注意回调函数的第一个参数永远是 error 。

    ```javascript
      fluffy.save(function (err, fluffy) {
        if (err) return console.error(err);
        fluffy.speak();
      });
    ```

    后来我们收集了好多喵，就可以通过以下方法获取喵星人 [model](/docs/models.html) 里的所有数据：

    ```javascript
    Kitten.find(function (err, kittens) {
      if (err) return console.error(err);
      console.log(kittens);
    })
    ```

    如果我们想获取特定的数据，
    可以了解一下 [query](/docs/queries.html)。

    ```javascript
    // 这么写可以获取所有 name 为 "Fluff" 开头的数据
    Kitten.find({ name: /^fluff/ }, callback);
    ```

    ### 可喜可贺

    我们已经看完快速上手啦！上面我们写了一个 schema ，添加了 method ，然后用 Mongoose 把我们的猫储存到了数据库，
    接着我们可以到[指引](guide.html) 和 [API 文档](api.html)了解更多信息。
