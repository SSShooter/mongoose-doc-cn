extends layout

block content
  h2 Schemas
  .important
    :markdown
      建议先阅读[快速上手](./index.html)，简单了解一下Mongoose的工作流程。
      如果你要从4.x迁移到5.x，请阅读[迁移指引](https://github.com/Automattic/mongoose/blob/master/migrating_to_5.md).
  :markdown
    <h3 id="definition"><a href="#definition">定义一个schema</a></h3>

    Mongoose 的一切始于 Schema。每个 schema 都会映射到一个 MongoDB
    collection ，并定义这个collection里的文档的构成。

    ```javascript
      var mongoose = require('mongoose');
      var Schema = mongoose.Schema;

      var blogSchema = new Schema({
        title:  String,
        author: String,
        body:   String,
        comments: [{ body: String, date: Date }],
        date: { type: Date, default: Date.now },
        hidden: Boolean,
        meta: {
          votes: Number,
          favs:  Number
        }
      });
    ```

    在这之后你还想添加 keys 的话， 请使用
    [Schema#add](./api.html#schema_Schema-add) 方法。

    document 里每个属性的类型都会被转换为 在 `blogSchema` 里定义对应的 [SchemaType](./api.html#schematype_SchemaType)。
    例如 `title` 属性会被转换为 SchemaType [String](./api.html#schema-string-js)，
    而 `date`属性会被转换为 SchemaType `Date`。
    还可以像上面 `meta` 属性，更详细地指定嵌套在里面的属性类型。

    允许使用的 SchemaTypes 有:

    * String
    * Number
    * Date
    * Buffer
    * Boolean
    * Mixed
    * ObjectId
    * Array

    更多关于 [SchemaTypes](./schematypes.html)

    Schema的功能不只是定义文档结构和属性类型，它可以定义——
    * document 的 [instance methods](#methods)
    * model 的 [static Model methods](#statics)
    * [复合索引](#indexes)
    * 文档的生命周期钩子，也成为[中间件](./middleware.html)

    <h3 id="models"><a href="#models">创建一个 model</a></h3>

    To use our schema definition, we need to convert our `blogSchema` into a
    [Model](./models.html) we can work with.
    To do so, we pass it into `mongoose.model(modelName, schema)`:

    ```javascript
      var Blog = mongoose.model('Blog', blogSchema);
      // ready to go!
    ```

    <h3 id="methods"><a href="#methods">实例方法（method）</a></h3>

    Instances of `Models` are [documents](./documents.html). Documents have
    many of their own [built-in instance methods](./api.html#document-js).
    We may also define our own custom document instance methods too.

    ```javascript
      // define a schema
      var animalSchema = new Schema({ name: String, type: String });

      // assign a function to the "methods" object of our animalSchema
      animalSchema.methods.findSimilarTypes = function(cb) {
        return this.model('Animal').find({ type: this.type }, cb);
      };
    ```

    Now all of our `animal` instances have a `findSimilarTypes` method available
    to them.

    ```javascript
      var Animal = mongoose.model('Animal', animalSchema);
      var dog = new Animal({ type: 'dog' });

      dog.findSimilarTypes(function(err, dogs) {
        console.log(dogs); // woof
      });
    ```

    * Overwriting a default mongoose document method may lead to unpredictable results. See [this](./api.html#schema_Schema.reserved) for more details.
    * Do **not** declare methods using ES6 arrow functions (`=>`). Arrow functions [explicitly prevent binding `this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this), so your method will **not** have access to the document and the above examples will not work.

    <h3 id="statics"><a href="#statics">静态方法（static）</a></h3>

    Adding static methods to a `Model` is simple as well. Continuing with our
    `animalSchema`:

    ```javascript
      // assign a function to the "statics" object of our animalSchema
      animalSchema.statics.findByName = function(name, cb) {
        return this.find({ name: new RegExp(name, 'i') }, cb);
      };

      var Animal = mongoose.model('Animal', animalSchema);
      Animal.findByName('fido', function(err, animals) {
        console.log(animals);
      });
    ```

    Do **not** declare statics using ES6 arrow functions (`=>`). Arrow functions [explicitly prevent binding `this`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this), so the above examples will not work because of the value of `this`.

    <h3 id="query-helpers"><a href="#query-helpers">查询助手（query helper）</a></h3>

    查询助手作用于 query 实例，方便你自定义拓展你的 [链式查询](./queries.html)

    ```javascript
      animalSchema.query.byName = function(name) {
        return this.find({ name: new RegExp(name, 'i') });
      };

      var Animal = mongoose.model('Animal', animalSchema);
      Animal.find().byName('fido').exec(function(err, animals) {
        console.log(animals);
      });
    ```

    <h3 id="indexes"><a href="#indexes">索引（index）</a></h3>

    MongoDB 支持 [secondary indexes](http://docs.mongodb.org/manual/indexes/).
    With mongoose, we define these indexes within our `Schema` [at](./api.html#schematype_SchemaType-index) [the](./api.html#schematype_SchemaType-unique) [path](./api.html#schematype_SchemaType-sparse) [level](./api.html#schema_date_SchemaDate-expires) or the `schema` level.
    Defining indexes at the schema level is necessary when creating
    [compound indexes](https://docs.mongodb.com/manual/core/index-compound/).

    ```javascript
      var animalSchema = new Schema({
        name: String,
        type: String,
        tags: { type: [String], index: true } // field level
      });

      animalSchema.index({ name: 1, type: -1 }); // schema level
    ```

    When your application starts up, Mongoose automatically calls [`createIndex`](https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#db.collection.createIndex) for each defined index in your schema.
    Mongoose will call `createIndex` for each index sequentially, and emit an 'index' event on the model when all the `createIndex` calls succeeded or when there was an error.
    While nice for development, it is recommended this behavior be disabled in production since index creation can cause a [significant performance impact](http://docs.mongodb.org/manual/core/indexes/#index-creation-operations). Disable the behavior by setting the `autoIndex` option of your schema to `false`, or globally on the connection by setting the option `autoIndex` to `false`.

    ```javascript
      mongoose.connect('mongodb://user:pass@localhost:port/database', { autoIndex: false });
      // or
      mongoose.createConnection('mongodb://user:pass@localhost:port/database', { autoIndex: false });
      // or
      animalSchema.set('autoIndex', false);
      // or
      new Schema({..}, { autoIndex: false });
    ```

    Mongoose will emit an `index` event on the model when indexes are done
    building or an error occurred.

    ```javascript
      // Will cause an error because mongodb has an _id index by default that
      // is not sparse
      animalSchema.index({ _id: 1 }, { sparse: true });
      var Animal = mongoose.model('Animal', animalSchema);

      Animal.on('index', function(error) {
        // "_id index cannot be sparse"
        console.log(error.message);
      });
    ```

    See also the [Model#ensureIndexes](./api.html#model_Model.ensureIndexes) method.

    <h3 id="virtuals"><a href="#virtuals">虚拟值（Virtual）</a></h3>

    [Virtuals](./api.html#schema_Schema-virtual) are document properties that
    you can get and set but that do not get persisted to MongoDB. The getters
    are useful for formatting or combining fields, while setters are useful for
    de-composing a single value into multiple values for storage.

    ```javascript
      // define a schema
      var personSchema = new Schema({
        name: {
          first: String,
          last: String
        }
      });

      // compile our model
      var Person = mongoose.model('Person', personSchema);

      // create a document
      var axl = new Person({
        name: { first: 'Axl', last: 'Rose' }
      });
    ```

    Suppose you want to print out the person's full name. You could do it yourself:

    ```javascript
    console.log(axl.name.first + ' ' + axl.name.last); // Axl Rose
    ```

    But concatenating the first and last name every time can get cumbersome.
    And what if you want to do some extra processing on the name, like
    [removing diacritics](https://www.npmjs.com/package/diacritics)? A
    [virtual property getter](./api.html#virtualtype_VirtualType-get) lets you
    define a `fullName` property that won't get persisted to MongoDB.

    ```javascript
    personSchema.virtual('fullName').get(function () {
      return this.name.first + ' ' + this.name.last;
    });
    ```

    Now, mongoose will call your getter function every time you access the
    `fullName` property:

    ```javascript
    console.log(axl.fullName); // Axl Rose
    ```

    If you use `toJSON()` or `toObject()` (or use `JSON.stringify()` on a
    mongoose document) mongoose will *not* include virtuals by default.
    Pass `{ virtuals: true }` to either
    [toObject()](./api.html#document_Document-toObject) or `toJSON()`.

    You can also add a custom setter to your virtual that will let you set both
    first name and last name via the `fullName` virtual.

    ```javascript
    personSchema.virtual('fullName').
      get(function() { return this.name.first + ' ' + this.name.last; }).
      set(function(v) {
        this.name.first = v.substr(0, v.indexOf(' '));
        this.name.last = v.substr(v.indexOf(' ') + 1);
      });

    axl.fullName = 'William Rose'; // Now `axl.name.first` is "William"
    ```

    Virtual property setters are applied before other validation. So the example
    above would still work even if the `first` and `last` name fields were
    required.

    Only non-virtual properties work as part of queries and for field selection.
    Since virtuals are not stored in MongoDB, you can't query with them.

    <h5 id="aliases"><a href="#aliases">别名（Alias）</a></h5>

    Aliases are a particular type of virtual where the getter and setter
    seamlessly get and set another property. This is handy for saving network
    bandwidth, so you can convert a short property name stored in the database
    into a longer name for code readability.

    ```javascript
    var personSchema = new Schema({
      n: {
        type: String,
        // Now accessing `name` will get you the value of `n`, and setting `n` will set the value of `name`
        alias: 'name'
      }
    });

    // Setting `name` will propagate to `n`
    var person = new Person({ name: 'Val' });
    console.log(person); // { n: 'Val' }
    console.log(person.toObject({ virtuals: true })); // { n: 'Val', name: 'Val' }
    console.log(person.name); // "Val"

    person.name = 'Not Val';
    console.log(person); // { n: 'Not Val' }
    ```

    <h3 id="options"><a href="#options">选项</a></h3>

    Schemas 有很多可配置选项，你可以在构造时传入或者直接 `set`：

    ```javascript
    new Schema({..}, options);

    // or

    var schema = new Schema({..});
    schema.set(option, value);
    ```

    Valid options:

    - [autoIndex](#autoIndex)
    - [bufferCommands](#bufferCommands)
    - [capped](#capped)
    - [collection](#collection)
    - [id](#id)
    - [_id](#_id)
    - [minimize](#minimize)
    - [read](#read)
    - [shardKey](#shardKey)
    - [strict](#strict)
    - [strictQuery](#strictQuery)
    - [toJSON](#toJSON)
    - [toObject](#toObject)
    - [typeKey](#typeKey)
    - [validateBeforeSave](#validateBeforeSave)
    - [versionKey](#versionKey)
    - [collation](#collation)
    - [skipVersioning](#skipVersioning)
    - [timestamps](#timestamps)

    <h3 id="autoIndex"><a href="#autoIndex">option: autoIndex</a></h3>

    应用启动时，Mongoose 自动发送
    [`createIndex`](https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#db.collection.createIndex) 指令，
    schema 里的每个 index 都会被创建。
    如果你需要关闭自动创建功能或者需要在创建后进行一系列操作，
    可以把 `autoIndex` 设为 `false`，
    然后对 model 调用 [ensureIndexes](./api.html#model_Model.ensureIndexes)：

    ```javascript
    var schema = new Schema({..}, { autoIndex: false });
    var Clock = mongoose.model('Clock', schema);
    Clock.ensureIndexes(callback);
    ```

    <h3 id="bufferCommands"><a href="#bufferCommands">option: bufferCommands</a></h3>

    By default, mongoose buffers commands when the connection goes down until
    the driver manages to reconnect. To disable buffering, set `bufferCommands`
    to false.

    ```javascript
    var schema = new Schema({..}, { bufferCommands: false });
    ```

    The schema `bufferCommands` option overrides the global `bufferCommands` option.

    ```javascript
    mongoose.set('bufferCommands', true);
    // Schema option below overrides the above, if the schema option is set.
    var schema = new Schema({..}, { bufferCommands: false });
    ```

    <h3 id="capped"><a href="#capped">option: capped</a></h3>

    Mongoose 支持 MongoDB 的 [capped](http://www.mongodb.org/display/DOCS/Capped+Collections)
    collections。 要从底层把 collection 设定为 `capped` （封顶）, 
    可以把 collection 的最大容量设定到 `capped` 选项（单位[bytes](http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-size.)）。

    ```javascript
    new Schema({..}, { capped: 1024 });
    ```

    The `capped` option may also be set to an object if you want to pass
    additional options like [max](http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-max)
    or [autoIndexId](http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-autoIndexId).
    In this case you must explicitly pass the `size` option, which is required.

    ```javascript
    new Schema({..}, { capped: { size: 1024, max: 1000, autoIndexId: true } });
    ```

    <h3 id="collection"><a href="#collection">option: collection</a></h3>

    Mongoose by default produces a collection name by passing the model name to
    the [utils.toCollectionName](./api.html#utils_exports.toCollectionName) method.
    This method pluralizes the name. Set this option if you need a different name
    for your collection.

    ```javascript
    var dataSchema = new Schema({..}, { collection: 'data' });
    ```

    <h3 id="id"><a href="#id">option: id</a></h3>

    Mongoose assigns each of your schemas an `id` virtual getter by default
    which returns the documents `_id` field cast to a string, or in the case of
    ObjectIds, its hexString. If you don't want an `id` getter added to your
    schema, you may disable it passing this option at schema construction time.

    ```javascript
    // default behavior
    var schema = new Schema({ name: String });
    var Page = mongoose.model('Page', schema);
    var p = new Page({ name: 'mongodb.org' });
    console.log(p.id); // '50341373e894ad16347efe01'

    // disabled id
    var schema = new Schema({ name: String }, { id: false });
    var Page = mongoose.model('Page', schema);
    var p = new Page({ name: 'mongodb.org' });
    console.log(p.id); // undefined
    ```

    <h3 id="_id"><a href="#_id">option: _id</a></h3>

    Mongoose assigns each of your schemas an `_id` field by default if one
    is not passed into the [Schema](/docs/api.html#schema-js) constructor.
    The type assigned is an [ObjectId](/docs/api.html#schema_Schema.Types)
    to coincide with MongoDB's default behavior. If you don't want an `_id`
    added to your schema at all, you may disable it using this option.

    You can **only** use this option on subdocuments. Mongoose can't
    save a document without knowing its id, so you will get an error if
    you try to save a document without an `_id`.

    ```javascript
    // default behavior
    var schema = new Schema({ name: String });
    var Page = mongoose.model('Page', schema);
    var p = new Page({ name: 'mongodb.org' });
    console.log(p); // { _id: '50341373e894ad16347efe01', name: 'mongodb.org' }

    // disabled _id
    var childSchema = new Schema({ name: String }, { _id: false });
    var parentSchema = new Schema({ children: [childSchema] });

    var Model = mongoose.model('Model', parentSchema);

    Model.create({ children: [{ name: 'Luke' }] }, function(error, doc) {
      // doc.children[0]._id will be undefined
    });
    ```

    <h3 id="minimize"><a href="#minimize">option: minimize</a></h3>

    Mongoose will, by default, "minimize" schemas by removing empty objects.

    ```javascript
    var schema = new Schema({ name: String, inventory: {} });
    var Character = mongoose.model('Character', schema);

    // will store `inventory` field if it is not empty
    var frodo = new Character({ name: 'Frodo', inventory: { ringOfPower: 1 }});
    Character.findOne({ name: 'Frodo' }, function(err, character) {
      console.log(character); // { name: 'Frodo', inventory: { ringOfPower: 1 }}
    });

    // will not store `inventory` field if it is empty
    var sam = new Character({ name: 'Sam', inventory: {}});
    Character.findOne({ name: 'Sam' }, function(err, character) {
      console.log(character); // { name: 'Sam' }
    });
    ```

    This behavior can be overridden by setting `minimize` option to `false`. It
    will then store empty objects.

    ```javascript
    var schema = new Schema({ name: String, inventory: {} }, { minimize: false });
    var Character = mongoose.model('Character', schema);

    // will store `inventory` if empty
    var sam = new Character({ name: 'Sam', inventory: {}});
    Character.findOne({ name: 'Sam' }, function(err, character) {
      console.log(character); // { name: 'Sam', inventory: {}}
    });
    ```

    <h3 id="read"><a href="#read">option: read</a></h3>

    Allows setting [query#read](/docs/api.html#query_Query-read) options at the
    schema level, providing us a way to apply default
    [ReadPreferences](http://docs.mongodb.org/manual/applications/replication/#replica-set-read-preference)
    to all queries derived from a model.

    ```javascript
    var schema = new Schema({..}, { read: 'primary' });            // also aliased as 'p'
    var schema = new Schema({..}, { read: 'primaryPreferred' });   // aliased as 'pp'
    var schema = new Schema({..}, { read: 'secondary' });          // aliased as 's'
    var schema = new Schema({..}, { read: 'secondaryPreferred' }); // aliased as 'sp'
    var schema = new Schema({..}, { read: 'nearest' });            // aliased as 'n'
    ```

    The alias of each pref is also permitted so instead of having to type out
    'secondaryPreferred' and getting the spelling wrong, we can simply pass 'sp'.

    The read option also allows us to specify _tag sets_. These tell the
    [driver](https://github.com/mongodb/node-mongodb-native/) from which members
    of the replica-set it should attempt to read. Read more about tag sets
    [here](http://docs.mongodb.org/manual/applications/replication/#tag-sets) and
    [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).

    _NOTE: you may also specify the driver read pref [strategy](http://mongodb.github.com/node-mongodb-native/api-generated/replset.html?highlight=strategy)
    option when connecting:_

    ```javascript
    // pings the replset members periodically to track network latency
    var options = { replset: { strategy: 'ping' }};
    mongoose.connect(uri, options);

    var schema = new Schema({..}, { read: ['nearest', { disk: 'ssd' }] });
    mongoose.model('JellyBean', schema);
    ```

    <h3 id="shardKey"><a href="#shardKey">option: shardKey</a></h3>

    The `shardKey` option is used when we have a [sharded MongoDB architecture](http://www.mongodb.org/display/DOCS/Sharding+Introduction).
    Each sharded collection is given a shard key which must be present in all
    insert/update operations. We just need to set this schema option to the same
    shard key and we’ll be all set.

    ```javascript
    new Schema({ .. }, { shardKey: { tag: 1, name: 1 }})
    ```

    _Note that Mongoose does not send the `shardcollection` command for you. You
    must configure your shards yourself._

    <h3 id="strict">option: strict</h3>

    The strict option, (enabled by default), ensures that values passed to our
    model constructor that were not specified in our schema do not get saved to
    the db.

    ```javascript
    var thingSchema = new Schema({..})
    var Thing = mongoose.model('Thing', thingSchema);
    var thing = new Thing({ iAmNotInTheSchema: true });
    thing.save(); // iAmNotInTheSchema is not saved to the db

    // set to false..
    var thingSchema = new Schema({..}, { strict: false });
    var thing = new Thing({ iAmNotInTheSchema: true });
    thing.save(); // iAmNotInTheSchema is now saved to the db!!
    ```

    This also affects the use of `doc.set()` to set a property value.

    ```javascript
    var thingSchema = new Schema({..})
    var Thing = mongoose.model('Thing', thingSchema);
    var thing = new Thing;
    thing.set('iAmNotInTheSchema', true);
    thing.save(); // iAmNotInTheSchema is not saved to the db
    ```

    This value can be overridden at the model instance level by passing a second
    boolean argument:

    ```javascript
    var Thing = mongoose.model('Thing');
    var thing = new Thing(doc, true);  // enables strict mode
    var thing = new Thing(doc, false); // disables strict mode
    ```

    The `strict` option may also be set to `"throw"` which will cause errors
    to be produced instead of dropping the bad data.

    _NOTE: Any key/val set on the instance that does not exist in your schema is always ignored, regardless of schema option._

    ```javascript
    var thingSchema = new Schema({..})
    var Thing = mongoose.model('Thing', thingSchema);
    var thing = new Thing;
    thing.iAmNotInTheSchema = true;
    thing.save(); // iAmNotInTheSchema is never saved to the db
    ```

    <h3 id="strictQuery">option: strictQuery</h3>

    For backwards compatibility, the `strict` option does **not** apply to
    the `filter` parameter for queries.

    ```javascript
    const mySchema = new Schema({ field: Number }, { strict: true });
    const MyModel = mongoose.model('Test', mySchema);

    // Mongoose will **not** filter out `notInSchema: 1`, despite `strict: true`
    MyModel.find({ notInSchema: 1 });
    ```

    The `strict` option does apply to updates.

    ```javascript
    // Mongoose will strip out `notInSchema` from the update if `strict` is
    // not `false`
    MyModel.updateMany({}, { $set: { notInSchema: 1 } });
    ```

    Mongoose has a separate `strictQuery` option to toggle strict mode for
    the `filter` parameter to queries.

    ```javascript
    const mySchema = new Schema({ field: Number }, {
      strict: true,
      strictQuery: true // Turn on strict mode for query filters
    });
    const MyModel = mongoose.model('Test', mySchema);

    // Mongoose will strip out `notInSchema: 1` because `strictQuery` is `true`
    MyModel.find({ notInSchema: 1 });
    ```

    <h3 id="toJSON"><a href="#toJSON">option: toJSON</a></h3>

    Exactly the same as the [toObject](#toObject) option but only applies when
    the documents `toJSON` method is called.

    ```javascript
    var schema = new Schema({ name: String });
    schema.path('name').get(function (v) {
      return v + ' is my name';
    });
    schema.set('toJSON', { getters: true, virtuals: false });
    var M = mongoose.model('Person', schema);
    var m = new M({ name: 'Max Headroom' });
    console.log(m.toObject()); // { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom' }
    console.log(m.toJSON()); // { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom is my name' }
    // since we know toJSON is called whenever a js object is stringified:
    console.log(JSON.stringify(m)); // { "_id": "504e0cd7dd992d9be2f20b6f", "name": "Max Headroom is my name" }
    ```

    To see all available `toJSON/toObject` options, read [this](/docs/api.html#document_Document-toObject).

    <h3 id="toObject"><a href="#toObject">option: toObject</a></h3>

    Documents have a [toObject](/docs/api.html#document_Document-toObject) method
    which converts the mongoose document into a plain javascript object. This
    method accepts a few options. Instead of applying these options on a
    per-document basis we may declare the options here and have it applied to
    all of this schemas documents by default.

    To have all virtuals show up in your `console.log` output, set the
    `toObject` option to `{ getters: true }`:

    ```javascript
    var schema = new Schema({ name: String });
    schema.path('name').get(function (v) {
      return v + ' is my name';
    });
    schema.set('toObject', { getters: true });
    var M = mongoose.model('Person', schema);
    var m = new M({ name: 'Max Headroom' });
    console.log(m); // { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom is my name' }
    ```

    To see all available `toObject` options, read [this](/docs/api.html#document_Document-toObject).

    <h3 id="typeKey"><a href="#typeKey">option: typeKey</a></h3>

    By default, if you have an object with key 'type' in your schema, mongoose
    will interpret it as a type declaration.

    ```javascript
    // Mongoose interprets this as 'loc is a String'
    var schema = new Schema({ loc: { type: String, coordinates: [Number] } });
    ```

    However, for applications like [geoJSON](http://docs.mongodb.org/manual/reference/geojson/),
    the 'type' property is important. If you want to control which key mongoose
    uses to find type declarations, set the 'typeKey' schema option.

    ```javascript
    var schema = new Schema({
      // Mongoose interpets this as 'loc is an object with 2 keys, type and coordinates'
      loc: { type: String, coordinates: [Number] },
      // Mongoose interprets this as 'name is a String'
      name: { $type: String }
    }, { typeKey: '$type' }); // A '$type' key means this object is a type declaration
    ```

    <h3 id="validateBeforeSave"><a href="#validateBeforeSave">option: validateBeforeSave</a></h3>

    By default, documents are automatically validated before they are saved to
    the database. This is to prevent saving an invalid document. If you want to
    handle validation manually, and be able to save objects which don't pass
    validation, you can set `validateBeforeSave` to false.

    ```javascript
    var schema = new Schema({ name: String });
    schema.set('validateBeforeSave', false);
    schema.path('name').validate(function (value) {
        return v != null;
    });
    var M = mongoose.model('Person', schema);
    var m = new M({ name: null });
    m.validate(function(err) {
        console.log(err); // Will tell you that null is not allowed.
    });
    m.save(); // Succeeds despite being invalid
    ```

    <h3 id="versionKey"><a href="#versionKey">option: versionKey</a></h3>

    The `versionKey` is a property set on each document when first created by
    Mongoose. This keys value contains the internal
    [revision](http://aaronheckmann.tumblr.com/post/48943525537/mongoose-v3-part-1-versioning)
    of the document. The `versionKey` option is a string that represents the
    path to use for versioning. The default is `__v`. If this conflicts with
    your application you can configure as such:

    ```javascript
    var schema = new Schema({ name: 'string' });
    var Thing = mongoose.model('Thing', schema);
    var thing = new Thing({ name: 'mongoose v3' });
    thing.save(); // { __v: 0, name: 'mongoose v3' }

    // customized versionKey
    new Schema({..}, { versionKey: '_somethingElse' })
    var Thing = mongoose.model('Thing', schema);
    var thing = new Thing({ name: 'mongoose v3' });
    thing.save(); // { _somethingElse: 0, name: 'mongoose v3' }
    ```

    Document versioning can also be disabled by setting the `versionKey` to
    `false`.
    _DO NOT disable versioning unless you [know what you are doing](http://aaronheckmann.tumblr.com/post/48943525537/mongoose-v3-part-1-versioning)._

    ```javascript
    new Schema({..}, { versionKey: false });
    var Thing = mongoose.model('Thing', schema);
    var thing = new Thing({ name: 'no versioning please' });
    thing.save(); // { name: 'no versioning please' }
    ```

    <h3 id="collation"><a href="#collation">option: collation</a></h3>

    Sets a default [collation](https://docs.mongodb.com/manual/reference/collation/)
    for every query and aggregation. [Here's a beginner-friendly overview of collations](http://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-collations).

    ```javascript
    var schema = new Schema({
      name: String
    }, { collation: { locale: 'en_US', strength: 1 } });

    var MyModel = db.model('MyModel', schema);

    MyModel.create([{ name: 'val' }, { name: 'Val' }]).
      then(function() {
        return MyModel.find({ name: 'val' });
      }).
      then(function(docs) {
        // `docs` will contain both docs, because `strength: 1` means
        // MongoDB will ignore case when matching.
      });
    ```

    <h3 id="skipVersioning"><a href="#skipVersioning">option: skipVersioning</a></h3>

    `skipVersioning` allows excluding paths from versioning (i.e., the internal
    revision will not be incremented even if these paths are updated). DO NOT
    do this unless you know what you're doing. For subdocuments, include this
    on the parent document using the fully qualified path.

    ```javascript
    new Schema({..}, { skipVersioning: { dontVersionMe: true } });
    thing.dontVersionMe.push('hey');
    thing.save(); // version is not incremented
    ```

    <h3 id="timestamps"><a href="#timestamps">option: timestamps</a></h3>

    If set `timestamps`, mongoose assigns `createdAt` and `updatedAt` fields to
    your schema, the type assigned is [Date](./api.html#schema-date-js).

    By default, the name of two fields are `createdAt` and `updatedAt`, customize
    the field name by setting `timestamps.createdAt` and `timestamps.updatedAt`.

    ```javascript
    var thingSchema = new Schema({..}, { timestamps: { createdAt: 'created_at' } });
    var Thing = mongoose.model('Thing', thingSchema);
    var thing = new Thing();
    thing.save(); // `created_at` & `updatedAt` will be included
    ```

    <h3 id="useNestedStrict"><a href="#useNestedStrict">option: useNestedStrict</a></h3>

    In mongoose 4, `update()` and `findOneAndUpdate()` only check the top-level
    schema's strict mode setting.

    ```javascript
    var childSchema = new Schema({}, { strict: false });
    var parentSchema = new Schema({ child: childSchema }, { strict: 'throw' });
    var Parent = mongoose.model('Parent', parentSchema);
    Parent.update({}, { 'child.name': 'Luke Skywalker' }, function(error) {
      // Error because parentSchema has `strict: throw`, even though
      // `childSchema` has `strict: false`
    });

    var update = { 'child.name': 'Luke Skywalker' };
    var opts = { strict: false };
    Parent.update({}, update, opts, function(error) {
      // This works because passing `strict: false` to `update()` overwrites
      // the parent schema.
    });
    ```

    If you set `useNestedStrict` to true, mongoose will use the child schema's
    `strict` option for casting updates.

    ```javascript
    var childSchema = new Schema({}, { strict: false });
    var parentSchema = new Schema({ child: childSchema },
      { strict: 'throw', useNestedStrict: true });
    var Parent = mongoose.model('Parent', parentSchema);
    Parent.update({}, { 'child.name': 'Luke Skywalker' }, function(error) {
      // Works!
    });
    ```

    <h3 id="plugins"><a href="#plugins">Pluggable</a></h3>

    Schemas are also [pluggable](./plugins.html) which allows us to package up reusable features into
    plugins that can be shared with the community or just between your projects.

    <h3 id="next">Next Up</h3>

    Now that we've covered `Schemas`, let's take a look at [SchemaTypes](/docs/schematypes.html).
